---
- name: Stop node services
  service:
    name:  "{{ item }}"
    state: stopped
  ignore_errors: true
  with_items:
    - kubelet
    - kube-proxy

- name: Copy node binaries
  command: cp /{{ download_dir }}/kubernetes/server/bin/{{ item }} /usr/bin/
  with_items:
    - kubelet
    - kube-proxy
    - kubectl

- name: Configure node binary permissions
  file:
    path:  /usr/bin/{{ item }}
    state: file
    mode:  0755
    owner: kube
    group: kube
  with_items:
    - kubelet
    - kube-proxy
    - kubectl

- name: Copy node service files
  copy:
    src: "{{ item }}.service"
    dest: /usr/lib/systemd/system/{{ item }}.service
  with_items:
    - kubelet
    - kube-proxy
  notify:
    - Reload Systemd
    - Restart node daemons
  tags:
    - copy_kubernetes_service_files

- name: Copy node config files
  template:
    src: "{{ item }}.j2"
    dest: /etc/kubernetes/{{ item }}
  with_items:
    - config
    - kubelet
    - proxy
  notify:
    - Reload Systemd
    - Restart node daemons
  tags:
    - copy_kubernetes_config_files

- name: Configure node config file permissions
  file:
    path:  /etc/kubernetes/{{ item }}
    state: file
    mode:  0644
    owner: kube
    group: kube
  notify:
    - Restart node daemons
  with_items:
    - config
    - kubelet
    - proxy

- name: Create certs and manifest directories
  file:
    path: /etc/kubernetes/{{ item }}
    state: directory
    owner: kube
    group: kube
    mode:  0770
  with_items:
    - certs
    - manifest
  tags: security

- name: Create CA certificate
  copy: 
    content: "{{ kube_ca_cert }}" 
    dest:    /etc/kubernetes/certs/ca.crt
    group:   kube
    owner:   kube
    mode:    0440
  tags: security

- name: Get the node token values
  slurp:
    src: "/etc/kubernetes/tokens/{{ item }}-{{ inventory_hostname }}.token"
  with_items:
    - "system:kubelet"
    - "system:proxy"
  register: tokens
  delegate_to: "{{ groups['kub-master'][0] }}"
  tags: security

- name: Set token facts
  set_fact:
    kubelet_token: "{{ tokens.results[0].content|b64decode }}"
    proxy_token: "{{ tokens.results[1].content|b64decode }}"
  tags: security

- name: write the kubecfg (auth) file for kubelet
  template: 
    src:  kubelet.kubeconfig.j2 
    dest: /etc/kubernetes/kubelet.kubeconfig
    owner: kube
    group: kube
  notify:
    - Restart kubelet
  tags: security

- name: write the kubecfg (auth) file for kube-proxy
  template: 
    src:  proxy.kubeconfig.j2 
    dest: /etc/kubernetes/proxy.kubeconfig
    owner: kube
    group: kube
  notify:
    - Restart kube-proxy
  tags: security

- name: Create /var/lib/kubelet/
  file:
    path: /var/lib/kubelet/
    state: directory
    owner: kube
    group: kube
    mode:  0755

- name: Reload Systemd
  command: systemctl daemon-reload

- name: Enable and start node services
  service:
    name:    "{{ item }}"
    enabled: yes
    state:   started
  ignore_errors: yes
  with_items:
    - kubelet
    - kube-proxy

# - name: Configure firewalld ports for etcd
#   firewalld: 
#     port:      "{{ item }}/tcp"
#     permanent: yes 
#     state:     enabled
#     immediate: yes
#   with_items:
#     - 2379
#     - 2380
#   when: use_firewalld


